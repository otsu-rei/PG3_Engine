#pragma once

//-----------------------------------------------------------------------------------------
// include
//-----------------------------------------------------------------------------------------
//* engine
#include <Engine/Content/Texture/Texture.h>
#include <Engine/Content/Model/Model.h>

//* lib
#include <Lib/Sxl/OptimizedMap.h>

//* c++
#include <variant>
#include <memory>
#include <filesystem>

////////////////////////////////////////////////////////////////////////////////////////////
// Asset class
////////////////////////////////////////////////////////////////////////////////////////////
class Asset {
public:

	////////////////////////////////////////////////////////////////////////////////////////////
	// using
	////////////////////////////////////////////////////////////////////////////////////////////
	using Files = std::variant<std::shared_ptr<Texture>, std::shared_ptr<Model>>;

	////////////////////////////////////////////////////////////////////////////////////////////
	// Node structure
	////////////////////////////////////////////////////////////////////////////////////////////
	struct Node {
		Sxl::OptimizerdMap<std::filesystem::path, Node>  folders;
		Sxl::OptimizerdMap<std::filesystem::path, Files> files;
	};

public:

	//=========================================================================================
	// public methods
	//=========================================================================================

	void Import(const std::filesystem::path& filepath);

private:

	//=========================================================================================
	// private variables
	//=========================================================================================

	Node root_;

};